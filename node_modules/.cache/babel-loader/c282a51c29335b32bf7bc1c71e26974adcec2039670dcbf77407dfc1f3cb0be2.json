{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ABHAY RAJ SINGH\\\\Desktop\\\\quickshell\\\\kanban-board\\\\src\\\\context\\\\BoardContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BoardContext = /*#__PURE__*/createContext();\nexport const BoardProvider = ({\n  children\n}) => {\n  _s();\n  const [tickets, setTickets] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [groupBy, setGroupBy] = useState(localStorage.getItem('groupBy') || 'status');\n  const [sortBy, setSortBy] = useState(localStorage.getItem('sortBy') || 'priority');\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('groupBy', groupBy);\n    localStorage.setItem('sortBy', sortBy);\n  }, [groupBy, sortBy]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment');\n      const data = await response.json();\n      setTickets(data.tickets);\n      setUsers(data.users);\n      setLoading(false);\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    }\n  };\n  const value = {\n    tickets,\n    users,\n    groupBy,\n    setGroupBy,\n    sortBy,\n    setSortBy,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(BoardContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(BoardProvider, \"QWke4qRjp0FWHyrEwHo1nvXwU/0=\");\n_c = BoardProvider;\nexport const useBoard = () => {\n  _s2();\n  const context = useContext(BoardContext);\n  if (!context) {\n    throw new Error('useBoard must be used within a BoardProvider');\n  }\n  return context;\n};\n_s2(useBoard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BoardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","BoardContext","BoardProvider","children","_s","tickets","setTickets","users","setUsers","groupBy","setGroupBy","localStorage","getItem","sortBy","setSortBy","loading","setLoading","fetchData","setItem","response","fetch","data","json","error","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBoard","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/ABHAY RAJ SINGH/Desktop/quickshell/kanban-board/src/context/BoardContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst BoardContext = createContext();\r\n\r\nexport const BoardProvider = ({ children }) => {\r\n  const [tickets, setTickets] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n  const [groupBy, setGroupBy] = useState(localStorage.getItem('groupBy') || 'status');\r\n  const [sortBy, setSortBy] = useState(localStorage.getItem('sortBy') || 'priority');\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('groupBy', groupBy);\r\n    localStorage.setItem('sortBy', sortBy);\r\n  }, [groupBy, sortBy]);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await fetch('https://api.quicksell.co/v1/internal/frontend-assignment');\r\n      const data = await response.json();\r\n      setTickets(data.tickets);\r\n      setUsers(data.users);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    tickets,\r\n    users,\r\n    groupBy,\r\n    setGroupBy,\r\n    sortBy,\r\n    setSortBy,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <BoardContext.Provider value={value}>\r\n      {children}\r\n    </BoardContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useBoard = () => {\r\n  const context = useContext(BoardContext);\r\n  if (!context) {\r\n    throw new Error('useBoard must be used within a BoardProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;AAEpC,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,QAAQ,CAAC;EACnF,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,UAAU,CAAC;EAClF,MAAM,CAACG,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdmB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAENnB,SAAS,CAAC,MAAM;IACda,YAAY,CAACO,OAAO,CAAC,SAAS,EAAET,OAAO,CAAC;IACxCE,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAEL,MAAM,CAAC;EACxC,CAAC,EAAE,CAACJ,OAAO,EAAEI,MAAM,CAAC,CAAC;EAErB,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,0DAA0D,CAAC;MACxF,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAClChB,UAAU,CAACe,IAAI,CAAChB,OAAO,CAAC;MACxBG,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC;MACpBS,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CP,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMS,KAAK,GAAG;IACZpB,OAAO;IACPE,KAAK;IACLE,OAAO;IACPC,UAAU;IACVG,MAAM;IACNC,SAAS;IACTC;EACF,CAAC;EAED,oBACEf,OAAA,CAACC,YAAY,CAACyB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EACjCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC1B,EAAA,CA5CWF,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AA8C1B,OAAO,MAAM8B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGtC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI,CAACiC,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}